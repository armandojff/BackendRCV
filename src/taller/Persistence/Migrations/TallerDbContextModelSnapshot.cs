// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RCVUcabBackend.Persistence.Database;

#nullable disable

namespace taller.Persistence.Migrations
{
    [DbContext(typeof(TallerDbContext))]
    partial class TallerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarcaCarroEntityTallererEntity", b =>
                {
                    b.Property<Guid>("marcasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("talleresId")
                        .HasColumnType("uuid");

                    b.HasKey("marcasId", "talleresId");

                    b.HasIndex("talleresId");

                    b.ToTable("MarcaCarroEntityTallererEntity");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.AnalisisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("cotizacion_taller")
                        .HasColumnType("uuid");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<Guid>("id_usuario_taller")
                        .HasColumnType("uuid");

                    b.Property<string>("titulo_analisis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Analisis");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.CotizacionTallerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("cantidad_piezas_reparar")
                        .HasColumnType("integer");

                    b.Property<double>("costo_reparacion")
                        .HasColumnType("double precision");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("fecha_culminacion")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("fecha_inicio")
                        .HasColumnType("DATE");

                    b.Property<Guid>("idAnalisis")
                        .HasColumnType("uuid");

                    b.Property<Guid>("usuario_tallerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("usuario_tallerId");

                    b.ToTable("Cotizacion_taller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.MarcaCarroEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("nombre_marca")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Marca_carro");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.OrdenCompraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("analisisId")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<string>("factura")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_vencimiento")
                        .HasColumnType("DATE");

                    b.Property<int>("limite_dias_pago")
                        .HasColumnType("integer");

                    b.Property<double>("total_pagar")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("analisisId");

                    b.ToTable("Orden_compra");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.PiezasEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("analisisId")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcion_pieza")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<Guid>("id_marcca_pieza")
                        .HasColumnType("uuid");

                    b.Property<double?>("precio")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("analisisId");

                    b.ToTable("Piezas");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.TallererEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("RIF")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("cumplimiento")
                        .HasColumnType("integer");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<string>("nombre_taller")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Taller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.TelefonoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("codigo_area")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("numero_telefono")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("usuario_tallerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("usuario_tallerId");

                    b.ToTable("Telefono");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.UsuarioTallerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("contraseña")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("estado")
                        .HasMaxLength(200)
                        .HasColumnType("integer");

                    b.Property<string>("primer_apellido")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("primer_nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("segundo_apellido")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("segundo_nombre")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("tallerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("tallerId");

                    b.ToTable("UsuariosTaller");
                });

            modelBuilder.Entity("MarcaCarroEntityTallererEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.MarcaCarroEntity", null)
                        .WithMany()
                        .HasForeignKey("marcasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCVUcabBackend.Persistence.Entities.TallererEntity", null)
                        .WithMany()
                        .HasForeignKey("talleresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.CotizacionTallerEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.UsuarioTallerEntity", "usuario_taller")
                        .WithMany("cotizaciones_taller")
                        .HasForeignKey("usuario_tallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario_taller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.OrdenCompraEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.AnalisisEntity", "analisis")
                        .WithMany()
                        .HasForeignKey("analisisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("analisis");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.PiezasEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.AnalisisEntity", "analisis")
                        .WithMany("piezas")
                        .HasForeignKey("analisisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("analisis");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.TelefonoEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.UsuarioTallerEntity", "usuario_taller")
                        .WithMany("Telefonos")
                        .HasForeignKey("usuario_tallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario_taller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.UsuarioTallerEntity", b =>
                {
                    b.HasOne("RCVUcabBackend.Persistence.Entities.TallererEntity", "taller")
                        .WithMany("UsuariosTaller")
                        .HasForeignKey("tallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.AnalisisEntity", b =>
                {
                    b.Navigation("piezas");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.TallererEntity", b =>
                {
                    b.Navigation("UsuariosTaller");
                });

            modelBuilder.Entity("RCVUcabBackend.Persistence.Entities.UsuarioTallerEntity", b =>
                {
                    b.Navigation("Telefonos");

                    b.Navigation("cotizaciones_taller");
                });
#pragma warning restore 612, 618
        }
    }
}
